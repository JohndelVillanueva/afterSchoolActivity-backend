
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.1
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.1",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ActivitysessionScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AfterschoolactivityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  location: 'location',
  coachName: 'coachName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  photo: 'photo'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  status: 'status'
};

exports.Prisma.Attendance_libraryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  date: 'date',
  rfid: 'rfid'
};

exports.Prisma.BorrowersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  rfid: 'rfid',
  title: 'title',
  date_borrowed: 'date_borrowed',
  date_returned: 'date_returned',
  remarks: 'remarks'
};

exports.Prisma.BuyersScalarFieldEnum = {
  buyer_id: 'buyer_id',
  buyer_name: 'buyer_name',
  rfid: 'rfid'
};

exports.Prisma.Clinic_historyScalarFieldEnum = {
  Id: 'Id',
  name: 'name',
  grade: 'grade',
  complaint: 'complaint',
  diagnose: 'diagnose',
  treatment: 'treatment',
  vital_signs: 'vital_signs',
  time_in: 'time_in',
  time_out: 'time_out',
  date: 'date',
  remarks: 'remarks'
};

exports.Prisma.CountriesScalarFieldEnum = {
  id: 'id',
  countryCode: 'countryCode',
  countryName: 'countryName',
  currencyCode: 'currencyCode',
  fipsCode: 'fipsCode',
  isoNumeric: 'isoNumeric',
  north: 'north',
  south: 'south',
  east: 'east',
  west: 'west',
  capital: 'capital',
  continentName: 'continentName',
  continent: 'continent',
  languages: 'languages'
};

exports.Prisma.EnrolledactivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  activityId: 'activityId',
  enrollmentDate: 'enrollmentDate'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  empno: 'empno',
  description: 'description',
  serial: 'serial',
  dateout: 'dateout',
  datein: 'datein',
  issuedby: 'issuedby',
  remarks: 'remarks'
};

exports.Prisma.Inventory__suppliersScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  itemsProvided: 'itemsProvided',
  address: 'address',
  phoneNumber: 'phoneNumber',
  email: 'email',
  rating: 'rating'
};

exports.Prisma.Inventory_bookstoreScalarFieldEnum = {
  id: 'id',
  product_name: 'product_name',
  quantity: 'quantity',
  selling_price: 'selling_price',
  date: 'date'
};

exports.Prisma.Library_loginScalarFieldEnum = {
  id: 'id',
  username: 'username',
  password: 'password'
};

exports.Prisma.Logs_enrollScalarFieldEnum = {
  id: 'id',
  ern: 'ern',
  stage: 'stage',
  usertouch: 'usertouch',
  touch: 'touch',
  notes: 'notes'
};

exports.Prisma.NationalitiesScalarFieldEnum = {
  id: 'id',
  countryCode: 'countryCode',
  nationalityName: 'nationalityName',
  currencyCode: 'currencyCode',
  fipsCode: 'fipsCode',
  isoNumeric: 'isoNumeric',
  north: 'north',
  south: 'south',
  east: 'east',
  west: 'west',
  capital: 'capital',
  continentName: 'continentName',
  continent: 'continent'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  product_code: 'product_code',
  type_of_product: 'type_of_product',
  name_of_product: 'name_of_product',
  price_of_product: 'price_of_product',
  date_created: 'date_created',
  last_touch: 'last_touch'
};

exports.Prisma.RequestsScalarFieldEnum = {
  id: 'id',
  rfid: 'rfid',
  reqtype: 'reqtype',
  reqdate: 'reqdate',
  reqneed: 'reqneed',
  reqdetails: 'reqdetails',
  approvedby: 'approvedby',
  approvedate: 'approvedate',
  approvedfin: 'approvedfin',
  approvedfindate: 'approvedfindate',
  status: 'status'
};

exports.Prisma.S_activitiesScalarFieldEnum = {
  id: 'id',
  actid: 'actid',
  subjcode: 'subjcode',
  actlvl: 'actlvl',
  actsection: 'actsection',
  actdate: 'actdate',
  actcreate: 'actcreate',
  actdesc: 'actdesc',
  acttype: 'acttype',
  actqtr: 'actqtr',
  maxscore: 'maxscore',
  flag: 'flag'
};

exports.Prisma.S_classattendanceScalarFieldEnum = {
  id: 'id',
  attendance: 'attendance',
  subjid: 'subjid',
  studid: 'studid',
  adate: 'adate',
  tid: 'tid',
  notes: 'notes'
};

exports.Prisma.S_coretableScalarFieldEnum = {
  id: 'id',
  start: 'start',
  end: 'end',
  grade: 'grade'
};

exports.Prisma.S_corevaluesScalarFieldEnum = {
  id: 'id',
  corevalue: 'corevalue'
};

exports.Prisma.S_payablesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  reservation_fee: 'reservation_fee',
  tuition_fee: 'tuition_fee',
  other_fee: 'other_fee',
  assessment_fee: 'assessment_fee',
  registration_fee: 'registration_fee',
  special_permit: 'special_permit',
  international_fee_old: 'international_fee_old',
  international_fee_new: 'international_fee_new',
  pta: 'pta'
};

exports.Prisma.S_recommendationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  esl: 'esl',
  star: 'star',
  completion: 'completion'
};

exports.Prisma.S_scoresScalarFieldEnum = {
  id: 'id',
  subjcode: 'subjcode',
  actid: 'actid',
  acttype: 'acttype',
  sid: 'sid',
  score: 'score',
  maxscore: 'maxscore',
  qtr: 'qtr',
  flag: 'flag'
};

exports.Prisma.S_studentcvScalarFieldEnum = {
  id: 'id',
  sid: 'sid',
  tid: 'tid',
  subjid: 'subjid',
  qtr: 'qtr',
  independence: 'independence',
  confidence: 'confidence',
  respect: 'respect',
  empathy: 'empathy',
  appreciation: 'appreciation',
  tolerance: 'tolerance',
  enthusiasm: 'enthusiasm',
  conduct: 'conduct'
};

exports.Prisma.S_subjectsScalarFieldEnum = {
  id: 'id',
  code: 'code',
  tid: 'tid',
  subjdesc: 'subjdesc',
  subjlevel: 'subjlevel',
  subjsection: 'subjsection',
  assignedby: 'assignedby',
  assigndate: 'assigndate',
  percentww: 'percentww',
  percentpt: 'percentpt',
  percentqt: 'percentqt'
};

exports.Prisma.S_transmuteScalarFieldEnum = {
  id: 'id',
  lowerl: 'lowerl',
  upperl: 'upperl',
  transmuted: 'transmuted'
};

exports.Prisma.S_verificationsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  section: 'section',
  grade: 'grade',
  subject: 'subject',
  request_unlock: 'request_unlock',
  flag: 'flag',
  created_at: 'created_at'
};

exports.Prisma.Sales_historyScalarFieldEnum = {
  sale_id: 'sale_id',
  buyer_id: 'buyer_id',
  product_name: 'product_name',
  quantity: 'quantity',
  sale_date: 'sale_date',
  rfid: 'rfid'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  start: 'start',
  end: 'end'
};

exports.Prisma.StudentdetailsScalarFieldEnum = {
  id: 'id',
  uniqid: 'uniqid',
  visa: 'visa',
  father: 'father',
  fathermail: 'fathermail',
  fathernumber: 'fathernumber',
  fatherwork: 'fatherwork',
  fcompany: 'fcompany',
  fsalary: 'fsalary',
  mother: 'mother',
  mothermail: 'mothermail',
  mothernumber: 'mothernumber',
  motherwork: 'motherwork',
  mcompany: 'mcompany',
  msalary: 'msalary',
  street: 'street',
  barangay: 'barangay',
  city: 'city',
  postal: 'postal',
  englishrw: 'englishrw',
  englishv: 'englishv',
  languages: 'languages',
  advclasses: 'advclasses',
  remedial: 'remedial',
  skill: 'skill',
  ashtma: 'ashtma',
  ashtmar: 'ashtmar',
  allergy: 'allergy',
  allergyr: 'allergyr',
  drug: 'drug',
  drugr: 'drugr',
  speech: 'speech',
  speechr: 'speechr',
  vision: 'vision',
  visionr: 'visionr',
  hearing: 'hearing',
  hearingr: 'hearingr',
  adhd: 'adhd',
  adhdr: 'adhdr',
  healthcond: 'healthcond',
  hospitalization: 'hospitalization',
  injuries: 'injuries',
  medication: 'medication',
  general: 'general',
  generaldets: 'generaldets',
  psych: 'psych',
  psychdets: 'psychdets',
  minor: 'minor',
  emergency: 'emergency',
  hospital: 'hospital',
  otc: 'otc',
  conforme: 'conforme',
  conformedate: 'conformedate'
};

exports.Prisma.TimeoffScalarFieldEnum = {
  id: 'id',
  rfid: 'rfid',
  leavetype: 'leavetype',
  datefrom: 'datefrom',
  dateto: 'dateto',
  ishalfday: 'ishalfday',
  details: 'details',
  credit: 'credit',
  approval: 'approval',
  approvedate: 'approvedate',
  hrnote: 'hrnote',
  hrdate: 'hrdate'
};

exports.Prisma.Type_of_productsScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.UniformScalarFieldEnum = {
  id: 'id',
  rfid: 'rfid',
  size: 'size',
  basic: 'basic',
  activity: 'activity',
  formal: 'formal',
  qtybasic: 'qtybasic',
  qtyact: 'qtyact',
  qtyform: 'qtyform',
  iscomplete: 'iscomplete',
  lasttouch: 'lasttouch',
  dateordered: 'dateordered',
  datereleased: 'datereleased',
  comment: 'comment'
};

exports.Prisma.Uniform_inventoryScalarFieldEnum = {
  id: 'id',
  uniform_type_id: 'uniform_type_id',
  uniform_size_id: 'uniform_size_id',
  qty: 'qty',
  gender: 'gender',
  date: 'date',
  user: 'user'
};

exports.Prisma.Uniform_issuedScalarFieldEnum = {
  id: 'id',
  rfid: 'rfid',
  releasedby: 'releasedby',
  uniform_type_id: 'uniform_type_id',
  uniform_size_id: 'uniform_size_id',
  date: 'date'
};

exports.Prisma.Uniform_sizesScalarFieldEnum = {
  id: 'id',
  size: 'size',
  created_at: 'created_at'
};

exports.Prisma.Uniform_typesScalarFieldEnum = {
  id: 'id',
  type: 'type',
  created_at: 'created_at'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  rfid: 'rfid',
  fname: 'fname',
  mname: 'mname',
  lname: 'lname',
  type: 'type',
  gender: 'gender',
  position: 'position',
  grade: 'grade',
  section: 'section',
  dob: 'dob',
  email: 'email',
  mobile: 'mobile',
  vacchist: 'vacchist',
  photo: 'photo',
  manager: 'manager',
  isactive: 'isactive',
  is_situation: 'is_situation',
  username: 'username',
  password: 'password',
  level: 'level',
  status: 'status',
  prevsch: 'prevsch',
  prevschcountry: 'prevschcountry',
  lrn: 'lrn',
  uniqid: 'uniqid',
  tf: 'tf',
  country: 'country',
  nationality: 'nationality',
  nationalities: 'nationalities',
  guardianname: 'guardianname',
  guardianemail: 'guardianemail',
  guardianphone: 'guardianphone',
  referral: 'referral',
  apptype: 'apptype',
  sy: 'sy',
  strand: 'strand',
  religion: 'religion',
  visa: 'visa',
  earlybird: 'earlybird',
  modelrelease: 'modelrelease',
  feepolicy: 'feepolicy',
  refund: 'refund',
  tos: 'tos',
  empno: 'empno',
  isESL: 'isESL',
  house: 'house',
  isofficial: 'isofficial',
  isEnrolledInAfterSchool: 'isEnrolledInAfterSchool'
};

exports.Prisma.User22ScalarFieldEnum = {
  id: 'id',
  rfid: 'rfid',
  fname: 'fname',
  mname: 'mname',
  lname: 'lname',
  gender: 'gender',
  position: 'position',
  grade: 'grade',
  section: 'section',
  dob: 'dob',
  email: 'email',
  mobile: 'mobile',
  vacchist: 'vacchist',
  photo: 'photo',
  manager: 'manager',
  isactive: 'isactive',
  username: 'username',
  password: 'password',
  level: 'level',
  status: 'status',
  prevsch: 'prevsch',
  prevschcountry: 'prevschcountry',
  lrn: 'lrn',
  uniqid: 'uniqid',
  tf: 'tf',
  country: 'country',
  nationality: 'nationality',
  guardianname: 'guardianname',
  guardianemail: 'guardianemail',
  guardianphone: 'guardianphone',
  referral: 'referral',
  apptype: 'apptype',
  sy: 'sy',
  strand: 'strand',
  visa: 'visa',
  earlybird: 'earlybird',
  modelrelease: 'modelrelease',
  feepolicy: 'feepolicy',
  refund: 'refund',
  tos: 'tos'
};

exports.Prisma.Users24ScalarFieldEnum = {
  id: 'id',
  rfid: 'rfid',
  fname: 'fname',
  mname: 'mname',
  lname: 'lname',
  type: 'type',
  gender: 'gender',
  position: 'position',
  grade: 'grade',
  section: 'section',
  dob: 'dob',
  email: 'email',
  mobile: 'mobile',
  vacchist: 'vacchist',
  photo: 'photo',
  manager: 'manager',
  isactive: 'isactive',
  is_situation: 'is_situation',
  username: 'username',
  password: 'password',
  level: 'level',
  status: 'status',
  prevsch: 'prevsch',
  prevschcountry: 'prevschcountry',
  lrn: 'lrn',
  uniqid: 'uniqid',
  tf: 'tf',
  country: 'country',
  nationality: 'nationality',
  nationalities: 'nationalities',
  religion: 'religion',
  guardianname: 'guardianname',
  guardianemail: 'guardianemail',
  guardianphone: 'guardianphone',
  referral: 'referral',
  apptype: 'apptype',
  sy: 'sy',
  strand: 'strand',
  visa: 'visa',
  earlybird: 'earlybird',
  modelrelease: 'modelrelease',
  feepolicy: 'feepolicy',
  refund: 'refund',
  tos: 'tos',
  empno: 'empno',
  isESL: 'isESL',
  house: 'house',
  isofficial: 'isofficial'
};

exports.Prisma.VisitorlogScalarFieldEnum = {
  id: 'id',
  name: 'name',
  rfid: 'rfid',
  comment: 'comment',
  registerdate: 'registerdate',
  status: 'status'
};

exports.Prisma.WispayScalarFieldEnum = {
  id: 'id',
  debit: 'debit',
  credit: 'credit',
  rfid: 'rfid',
  empid: 'empid',
  username: 'username',
  refcode: 'refcode',
  transdate: 'transdate',
  processedby: 'processedby',
  product_type: 'product_type',
  product_name: 'product_name',
  quantity: 'quantity',
  isAfterSchoolPayment: 'isAfterSchoolPayment'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.afterschoolactivityOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  dayOfWeek: 'dayOfWeek',
  location: 'location',
  coachName: 'coachName',
  photo: 'photo'
};

exports.Prisma.attendanceOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.attendance_libraryOrderByRelevanceFieldEnum = {
  name: 'name',
  rfid: 'rfid'
};

exports.Prisma.borrowersOrderByRelevanceFieldEnum = {
  name: 'name',
  rfid: 'rfid',
  title: 'title',
  remarks: 'remarks'
};

exports.Prisma.buyersOrderByRelevanceFieldEnum = {
  buyer_name: 'buyer_name'
};

exports.Prisma.clinic_historyOrderByRelevanceFieldEnum = {
  name: 'name',
  grade: 'grade',
  complaint: 'complaint',
  diagnose: 'diagnose',
  treatment: 'treatment',
  vital_signs: 'vital_signs',
  date: 'date',
  remarks: 'remarks'
};

exports.Prisma.countriesOrderByRelevanceFieldEnum = {
  countryCode: 'countryCode',
  countryName: 'countryName',
  currencyCode: 'currencyCode',
  fipsCode: 'fipsCode',
  isoNumeric: 'isoNumeric',
  north: 'north',
  south: 'south',
  east: 'east',
  west: 'west',
  capital: 'capital',
  continentName: 'continentName',
  continent: 'continent',
  languages: 'languages'
};

exports.Prisma.inventoryOrderByRelevanceFieldEnum = {
  empno: 'empno',
  description: 'description',
  serial: 'serial',
  issuedby: 'issuedby',
  remarks: 'remarks'
};

exports.Prisma.inventory__suppliersOrderByRelevanceFieldEnum = {
  companyName: 'companyName',
  itemsProvided: 'itemsProvided',
  address: 'address',
  phoneNumber: 'phoneNumber',
  email: 'email'
};

exports.Prisma.inventory_bookstoreOrderByRelevanceFieldEnum = {
  product_name: 'product_name'
};

exports.Prisma.library_loginOrderByRelevanceFieldEnum = {
  username: 'username',
  password: 'password'
};

exports.Prisma.logs_enrollOrderByRelevanceFieldEnum = {
  ern: 'ern',
  usertouch: 'usertouch',
  notes: 'notes'
};

exports.Prisma.nationalitiesOrderByRelevanceFieldEnum = {
  countryCode: 'countryCode',
  nationalityName: 'nationalityName',
  currencyCode: 'currencyCode',
  fipsCode: 'fipsCode',
  isoNumeric: 'isoNumeric',
  north: 'north',
  south: 'south',
  east: 'east',
  west: 'west',
  capital: 'capital',
  continentName: 'continentName',
  continent: 'continent'
};

exports.Prisma.productsOrderByRelevanceFieldEnum = {
  product_code: 'product_code',
  type_of_product: 'type_of_product',
  name_of_product: 'name_of_product',
  last_touch: 'last_touch'
};

exports.Prisma.requestsOrderByRelevanceFieldEnum = {
  reqtype: 'reqtype',
  reqdetails: 'reqdetails',
  status: 'status'
};

exports.Prisma.s_activitiesOrderByRelevanceFieldEnum = {
  actid: 'actid',
  subjcode: 'subjcode',
  actsection: 'actsection',
  actcreate: 'actcreate',
  actdesc: 'actdesc'
};

exports.Prisma.s_classattendanceOrderByRelevanceFieldEnum = {
  subjid: 'subjid',
  studid: 'studid',
  tid: 'tid',
  notes: 'notes'
};

exports.Prisma.s_coretableOrderByRelevanceFieldEnum = {
  grade: 'grade'
};

exports.Prisma.s_corevaluesOrderByRelevanceFieldEnum = {
  corevalue: 'corevalue'
};

exports.Prisma.s_payablesOrderByRelevanceFieldEnum = {
  user_id: 'user_id'
};

exports.Prisma.s_recommendationsOrderByRelevanceFieldEnum = {
  user_id: 'user_id'
};

exports.Prisma.s_scoresOrderByRelevanceFieldEnum = {
  subjcode: 'subjcode',
  actid: 'actid',
  sid: 'sid'
};

exports.Prisma.s_studentcvOrderByRelevanceFieldEnum = {
  sid: 'sid',
  tid: 'tid',
  subjid: 'subjid'
};

exports.Prisma.s_subjectsOrderByRelevanceFieldEnum = {
  code: 'code',
  tid: 'tid',
  subjdesc: 'subjdesc',
  subjlevel: 'subjlevel',
  subjsection: 'subjsection',
  assignedby: 'assignedby'
};

exports.Prisma.s_verificationsOrderByRelevanceFieldEnum = {
  user_id: 'user_id',
  section: 'section',
  subject: 'subject'
};

exports.Prisma.sales_historyOrderByRelevanceFieldEnum = {
  product_name: 'product_name'
};

exports.Prisma.scheduleOrderByRelevanceFieldEnum = {
  title: 'title'
};

exports.Prisma.studentdetailsOrderByRelevanceFieldEnum = {
  uniqid: 'uniqid',
  visa: 'visa',
  father: 'father',
  fathermail: 'fathermail',
  fathernumber: 'fathernumber',
  fatherwork: 'fatherwork',
  fcompany: 'fcompany',
  fsalary: 'fsalary',
  mother: 'mother',
  mothermail: 'mothermail',
  mothernumber: 'mothernumber',
  motherwork: 'motherwork',
  mcompany: 'mcompany',
  msalary: 'msalary',
  street: 'street',
  barangay: 'barangay',
  city: 'city',
  postal: 'postal',
  englishrw: 'englishrw',
  englishv: 'englishv',
  languages: 'languages',
  advclasses: 'advclasses',
  remedial: 'remedial',
  skill: 'skill',
  ashtma: 'ashtma',
  ashtmar: 'ashtmar',
  allergy: 'allergy',
  allergyr: 'allergyr',
  drug: 'drug',
  drugr: 'drugr',
  speech: 'speech',
  speechr: 'speechr',
  vision: 'vision',
  visionr: 'visionr',
  hearing: 'hearing',
  hearingr: 'hearingr',
  adhd: 'adhd',
  adhdr: 'adhdr',
  healthcond: 'healthcond',
  hospitalization: 'hospitalization',
  injuries: 'injuries',
  medication: 'medication',
  general: 'general',
  generaldets: 'generaldets',
  psych: 'psych',
  psychdets: 'psychdets',
  minor: 'minor',
  emergency: 'emergency',
  hospital: 'hospital',
  otc: 'otc',
  conforme: 'conforme',
  conformedate: 'conformedate'
};

exports.Prisma.timeoffOrderByRelevanceFieldEnum = {
  leavetype: 'leavetype',
  details: 'details',
  approval: 'approval',
  hrnote: 'hrnote'
};

exports.Prisma.type_of_productsOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.uniformOrderByRelevanceFieldEnum = {
  rfid: 'rfid',
  size: 'size',
  basic: 'basic',
  activity: 'activity',
  formal: 'formal',
  qtybasic: 'qtybasic',
  qtyact: 'qtyact',
  qtyform: 'qtyform',
  lasttouch: 'lasttouch',
  dateordered: 'dateordered',
  datereleased: 'datereleased',
  comment: 'comment'
};

exports.Prisma.uniform_inventoryOrderByRelevanceFieldEnum = {
  uniform_type_id: 'uniform_type_id',
  uniform_size_id: 'uniform_size_id',
  gender: 'gender',
  user: 'user'
};

exports.Prisma.uniform_issuedOrderByRelevanceFieldEnum = {
  rfid: 'rfid',
  releasedby: 'releasedby',
  uniform_type_id: 'uniform_type_id',
  uniform_size_id: 'uniform_size_id'
};

exports.Prisma.uniform_sizesOrderByRelevanceFieldEnum = {
  size: 'size'
};

exports.Prisma.uniform_typesOrderByRelevanceFieldEnum = {
  type: 'type'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  fname: 'fname',
  mname: 'mname',
  lname: 'lname',
  type: 'type',
  gender: 'gender',
  position: 'position',
  grade: 'grade',
  section: 'section',
  email: 'email',
  mobile: 'mobile',
  vacchist: 'vacchist',
  photo: 'photo',
  manager: 'manager',
  is_situation: 'is_situation',
  username: 'username',
  password: 'password',
  prevsch: 'prevsch',
  prevschcountry: 'prevschcountry',
  lrn: 'lrn',
  uniqid: 'uniqid',
  tf: 'tf',
  country: 'country',
  nationality: 'nationality',
  nationalities: 'nationalities',
  guardianname: 'guardianname',
  guardianemail: 'guardianemail',
  guardianphone: 'guardianphone',
  referral: 'referral',
  apptype: 'apptype',
  sy: 'sy',
  strand: 'strand',
  religion: 'religion',
  visa: 'visa',
  empno: 'empno',
  house: 'house'
};

exports.Prisma.user22OrderByRelevanceFieldEnum = {
  fname: 'fname',
  mname: 'mname',
  lname: 'lname',
  gender: 'gender',
  position: 'position',
  grade: 'grade',
  section: 'section',
  email: 'email',
  mobile: 'mobile',
  vacchist: 'vacchist',
  photo: 'photo',
  manager: 'manager',
  username: 'username',
  password: 'password',
  prevsch: 'prevsch',
  prevschcountry: 'prevschcountry',
  lrn: 'lrn',
  uniqid: 'uniqid',
  tf: 'tf',
  country: 'country',
  nationality: 'nationality',
  guardianname: 'guardianname',
  guardianemail: 'guardianemail',
  guardianphone: 'guardianphone',
  referral: 'referral',
  apptype: 'apptype',
  sy: 'sy',
  strand: 'strand',
  visa: 'visa'
};

exports.Prisma.users24OrderByRelevanceFieldEnum = {
  fname: 'fname',
  mname: 'mname',
  lname: 'lname',
  type: 'type',
  gender: 'gender',
  position: 'position',
  grade: 'grade',
  section: 'section',
  email: 'email',
  mobile: 'mobile',
  vacchist: 'vacchist',
  photo: 'photo',
  manager: 'manager',
  is_situation: 'is_situation',
  username: 'username',
  password: 'password',
  prevsch: 'prevsch',
  prevschcountry: 'prevschcountry',
  lrn: 'lrn',
  uniqid: 'uniqid',
  tf: 'tf',
  country: 'country',
  nationality: 'nationality',
  nationalities: 'nationalities',
  religion: 'religion',
  guardianname: 'guardianname',
  guardianemail: 'guardianemail',
  guardianphone: 'guardianphone',
  referral: 'referral',
  apptype: 'apptype',
  sy: 'sy',
  strand: 'strand',
  visa: 'visa',
  empno: 'empno',
  house: 'house'
};

exports.Prisma.visitorlogOrderByRelevanceFieldEnum = {
  name: 'name',
  rfid: 'rfid',
  comment: 'comment'
};

exports.Prisma.wispayOrderByRelevanceFieldEnum = {
  empid: 'empid',
  username: 'username',
  refcode: 'refcode',
  processedby: 'processedby',
  product_type: 'product_type',
  product_name: 'product_name'
};


exports.Prisma.ModelName = {
  activitysession: 'activitysession',
  afterschoolactivity: 'afterschoolactivity',
  attendance: 'attendance',
  attendance_library: 'attendance_library',
  borrowers: 'borrowers',
  buyers: 'buyers',
  clinic_history: 'clinic_history',
  countries: 'countries',
  enrolledactivity: 'enrolledactivity',
  inventory: 'inventory',
  inventory__suppliers: 'inventory__suppliers',
  inventory_bookstore: 'inventory_bookstore',
  library_login: 'library_login',
  logs_enroll: 'logs_enroll',
  nationalities: 'nationalities',
  products: 'products',
  requests: 'requests',
  s_activities: 's_activities',
  s_classattendance: 's_classattendance',
  s_coretable: 's_coretable',
  s_corevalues: 's_corevalues',
  s_payables: 's_payables',
  s_recommendations: 's_recommendations',
  s_scores: 's_scores',
  s_studentcv: 's_studentcv',
  s_subjects: 's_subjects',
  s_transmute: 's_transmute',
  s_verifications: 's_verifications',
  sales_history: 'sales_history',
  schedule: 'schedule',
  studentdetails: 'studentdetails',
  timeoff: 'timeoff',
  type_of_products: 'type_of_products',
  uniform: 'uniform',
  uniform_inventory: 'uniform_inventory',
  uniform_issued: 'uniform_issued',
  uniform_sizes: 'uniform_sizes',
  uniform_types: 'uniform_types',
  user: 'user',
  user22: 'user22',
  users24: 'users24',
  visitorlog: 'visitorlog',
  wispay: 'wispay'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
